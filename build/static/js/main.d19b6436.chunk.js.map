{"version":3,"sources":["App.js","index.js"],"names":["configure","catch","error","alert","style","position","top","bottom","left","right","margin","maxWidth","maxHeight","BarcodePicker","props","ref","React","createRef","ScanditSDKBarcodePicker","create","this","current","then","barcodePicker","onScan","on","onError","destroy","prevProps","JSON","stringify","scanSettings","applyScanSettings","visible","setVisible","Component","Demo","Fragment","id","className","playSoundOnScan","vibrateOnScan","ScanSettings","enabledSymbologies","codeDuplicateFilter","scanResult","document","getElementById","innerHTML","barcodes","reduce","string","barcode","Barcode","Symbology","toHumanizedName","symbology","data","console","message","render","querySelector"],"mappings":"6LAKAA,oBAAU,4yBAA4yBC,OAAM,SAAAC,GAC1zBC,MAAMD,MAGR,IAAME,EAAQ,CACZC,SAAU,WACVC,IAAK,IACLC,OAAQ,IACRC,KAAM,IACNC,MAAO,IACPC,OAAQ,OACRC,SAAU,SACVC,UAAW,OAgEEC,E,YAxCb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,IAAMC,IAAMC,YAFA,E,iFAKE,IAAD,OAClBC,gBAAwBC,OAAOC,KAAKL,IAAIM,QAASD,KAAKN,OAAOQ,MAAK,SAAAC,GAChE,EAAKA,cAAgBA,EACI,MAArB,EAAKT,MAAMU,QACbD,EAAcE,GAAG,OAAQ,EAAKX,MAAMU,QAEZ,MAAtB,EAAKV,MAAMY,SACbH,EAAcE,GAAG,YAAa,EAAKX,MAAMY,c,6CAMnB,MAAtBN,KAAKG,eACPH,KAAKG,cAAcI,Y,yCAIJC,GAGbC,KAAKC,UAAUF,EAAUG,gBAAkBF,KAAKC,UAAUV,KAAKN,MAAMiB,eACvEX,KAAKG,cAAcS,kBAAkBZ,KAAKN,MAAMiB,cAG9CH,EAAUK,UAAYb,KAAKN,MAAMmB,SACnCb,KAAKG,cAAcW,WAAWd,KAAKN,MAAMmB,W,+BAK3C,OAAO,yBAAKlB,IAAKK,KAAKL,IAAKX,MAAOA,Q,GAzDV+B,aCdtBC,E,iLAEF,OACE,kBAAC,IAAMC,SAAP,KACE,yBAAKC,GAAG,yBAAyBC,UAAU,gBAC3C,kBAAC,EAAD,CACEC,iBAAiB,EACjBC,eAAe,EACfV,aACE,IAAIW,eAAa,CACfC,mBAAoB,CAAC,KAAM,OAAQ,QAAS,OAAQ,OAAQ,UAAW,SAAU,SAAU,MAAO,UAClGC,oBAAqB,MAGzBpB,OAAQ,SAAAqB,GACNC,SAASC,eAAe,0BAA0BC,UAAYH,EAAWI,SAASC,QAAO,SACvFC,EACAC,GAEA,OAAOD,EAASE,UAAQC,UAAUC,gBAAgBH,EAAQI,WAAa,KAAOJ,EAAQK,KAAO,SAE/F,KAEF/B,QAAS,SAAAxB,GACPwD,QAAQxD,MAAMA,EAAMyD,iB,GAxBbxB,aAgCnByB,iBAAO,kBAAC,EAAD,MAAUd,SAASe,cAAc,W","file":"static/js/main.d19b6436.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { configure, BarcodePicker as ScanditSDKBarcodePicker } from \"scandit-sdk\";\n\n// Configure the library and activate it with a license key\nconfigure(\"ATe9mAw1EtL1CJWafEMhAHUqNSa2FUaEOT8azX98wlg5FtBLp2NYqkV/SOGje4DK9FMe/4puTgYOCoTapFaDF6tzH/07f+t+0xXCEPAmT9YyPj8zCSq5ZxMO4w18HC16ajAsB9LnGuG2JPJAEbZTLrxVmEy/mizAlj1WICYYxF+E0l65BV1GJn4nXykmBefYkP0rF+47lGrmrEF75wwW8emT5Fx4oyCViUJqbntL0BNr9HnTQn9QyM1xRZE1xWHtU5HaSJRI9DeZiT8AFB1mHmeKc8jGte+WEOQk+rME3wMDmDx4oI78KImYscUOuzbT0g0C1hlz4pQW6GlKpIusdE2TuvbaXPNxKikcHk3WM9lfAugZbdbt6dJ4qngKUbwxRWleNC6RE1fneZ72u9+vlTgXeTi6+N/nnxCkCshHJ8SciqlFvCM88d60bewIPOV9+JLuaE59WljKuYsA97gIFwjD0JC43m5GUaFfexinj/EqfhL5impVf7DZuMH6zztsXlygNbWs6ndxX9jNmoQILlnOA2GtlnOQh9Yk/mg4Bsc5IbsFMHTvQCx6/HpKui0n19pG+HRy9LLUCCnWh2pmrn18VAQpujCDrBhfC+zK+1tCnMSrFUIX5Pwbu4/ZRWW52JMX/4RPl0Hks27Q/Pk3MHdxPk4jtLSzO5tOy7CUWCu9dJtNIk8qjPG9K0ohMs2lORt9bSvSYZtQgquEGakfOCSviItr3gK2QDWSviK5eTlKWNGd+3H0zj0GaMstkFpl1yhrH3WLxJSj0YksYsJ8xRMzMDcUcooEAGwwFj6x\").catch(error => {\n  alert(error);\n});\n\nconst style = {\n  position: \"absolute\",\n  top: \"0\",\n  bottom: \"0\",\n  left: \"0\",\n  right: \"0\",\n  margin: \"auto\",\n  maxWidth: \"1280px\",\n  maxHeight: \"80%\"\n};\n\nclass BarcodePicker extends Component {\n  static propTypes = {\n    visible: PropTypes.bool,\n    playSoundOnScan: PropTypes.bool,\n    vibrateOnScan: PropTypes.bool,\n    scanningPaused: PropTypes.bool,\n    guiStyle: PropTypes.string,\n    videoFit: PropTypes.string,\n    scanSettings: PropTypes.object,\n    enableCameraSwitcher: PropTypes.bool,\n    enableTorchToggle: PropTypes.bool,\n    enableTapToFocus: PropTypes.bool,\n    enablePinchToZoom: PropTypes.bool,\n    accessCamera: PropTypes.bool,\n    camera: PropTypes.object,\n    cameraSettings: PropTypes.object,\n    targetScanningFPS: PropTypes.number,\n    onScan: PropTypes.func,\n    onError: PropTypes.func\n  };\n\n  constructor(props) {\n    super(props);\n    this.ref = React.createRef();\n  }\n\n  componentDidMount() {\n    ScanditSDKBarcodePicker.create(this.ref.current, this.props).then(barcodePicker => {\n      this.barcodePicker = barcodePicker;\n      if (this.props.onScan != null) {\n        barcodePicker.on(\"scan\", this.props.onScan);\n      }\n      if (this.props.onError != null) {\n        barcodePicker.on(\"scanError\", this.props.onError);\n      }\n    });\n  }\n\n  componentWillUnmount() {\n    if (this.barcodePicker != null) {\n      this.barcodePicker.destroy();\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    // These are just some examples of how to react to some possible property changes\n\n    if (JSON.stringify(prevProps.scanSettings) !== JSON.stringify(this.props.scanSettings)) {\n      this.barcodePicker.applyScanSettings(this.props.scanSettings);\n    }\n\n    if (prevProps.visible !== this.props.visible) {\n      this.barcodePicker.setVisible(this.props.visible);\n    }\n  }\n\n  render() {\n    return <div ref={this.ref} style={style} />;\n  }\n}\n\nexport default BarcodePicker;\n","import React, { Component } from \"react\";\nimport { render } from \"react-dom\";\nimport { ScanSettings, Barcode } from \"scandit-sdk\";\n\nimport BarcodePicker from \"./App\";\n\nclass Demo extends Component {\n  render() {\n    return (\n      <React.Fragment>\n        <div id=\"scandit-barcode-result\" className=\"result-text\"></div>\n        <BarcodePicker\n          playSoundOnScan={true}\n          vibrateOnScan={true}\n          scanSettings={\n            new ScanSettings({\n              enabledSymbologies: [\"qr\", \"ean8\", \"ean13\", \"upca\", \"upce\", \"code128\", \"code39\", \"code93\", \"itf\", \"pdf417\"],\n              codeDuplicateFilter: 1000\n            })\n          }\n          onScan={scanResult => {\n            document.getElementById(\"scandit-barcode-result\").innerHTML = scanResult.barcodes.reduce(function(\n              string,\n              barcode\n            ) {\n              return string + Barcode.Symbology.toHumanizedName(barcode.symbology) + \": \" + barcode.data + \"<br>\";\n            },\n            \"\");\n          }}\n          onError={error => {\n            console.error(error.message);\n          }}\n        />\n      </React.Fragment>\n    );\n  }\n}\n\nrender(<Demo />, document.querySelector(\"#root\"));"],"sourceRoot":""}